day24
1、锁(MySQL自动加锁和释放锁)
  1、目的：解决客户端并发访问的冲突问题
  2、锁分类
    1、锁类型
      1、读锁（共享锁）
        select :加读锁之后别人可以查询，但是不能更改(update)
      2、写锁(互斥锁、排他锁)
        update：加写锁之后，别人不能查，不能改
    2、锁粒度
      1、行级锁：可加读锁、写锁
      2、表级锁：可加读锁、写锁
2、存储引擎(处理表的处理器)
  1、基本操作
    1、查看所有存储引擎
      show engines;
    2、查看已有表的存储引擎
      show create table 表名;
    3、创建表时指定
      create table 表名(...)engine=MyISAM;
    4、已有表
      alter table 表名 engine=InnoDb;
  2、常用存储引擎特点
    1、InnoDB特点
      1、支持外键、行级锁、事务
      2、共享表空间
        表名.frm：表结构和索引信息
	表名.ibd：表记录
    2、MyISAM特点
      1、支持表级锁
      2、独享表空间
        表名.frm：表结构
	表名.ibd：表记录
	表名.MYI：索引信息
    3、memory特点
      1、表结构存储在硬盘，表记录存储在内存中
      2、服务/主机重启后，表记录消失
  3、如何选择使用哪个存储引擎
    1、执行查询操作多的表用MyISAM(使用InnoDB浪费资源)
    2、执行写操作多的表用InnoDB
3、数据备份(mysqldump,在linux终端中操作)
  完全备份
  增量备份
  1、mysqldump -u用户名 -p 源库名 > XXX.sql
  2、源库名表示方式
    --all-databases    备份所有库
    库名               备份单个库
    -B 库1 库2 库3     备份多个库
    库名 表1 表2 表3   备份指定库的多个表
  3、示例
    1、备份所有库，放到mydata目录下，
      mysqldump -uroot -p --all-database > all.sql
      mysqldump -uroot -p db3 sheng city xian > scx.sql
      mysqldump -uroot -p -B MOSHOU db3>md.sql
      mysqldump -uroot -p db3>db3.sql
4、数据恢复
  1、mysql -u用户名 -p 目标库名 < XXX.sql
  2、示例
    1、删除db3库，创建空库，从all.sql中恢复此库
      mysql>drop database db3;
      先创建空库db3（恢复只恢复表，库得自己手动创建）
      create database db3 charset utf8;
      use db3;
      然后在Linux终端
      mysql -uroot -p db3<db3.sql
      或
      mysql -uroot -p --one-database db3<all.sql(从完全备份数据中恢复指定库数据)
      注意：恢复时会覆盖原有文件
    
    2、做三件事
      1、在db3.sheng表中新增加1条记录
        insert into sheng values(11,200003,'日本省');
      2、在db3库创建表t888,插入1条记录
        create table t888(id int);
	insert into t888 values(1),(2),(3);
      3、从all.sql中恢复db3库
        mysql -uroot -p --one-database db3<all.sql
  3、注意
    1、恢复库时，会将表中数据覆盖，新增表不会删除
    2、恢复时，如果要恢复的库不存在，则先创建空库
5、数据导入
  1、作用：把系统文件内容导入到数据库中
  2、语法格式
    load data infile '文件名'
    into table 表名
    fields terminated by '分隔符'
    lines terminated by '\n'
  3、导入步骤
    1、在数据库中创建对应的表
       1,大空翼,98.5,13030032033,AID1709
	create table score(
	id int,
	name varchar(20),
	score float(5,2),
	phnumber char(11),
	class char(7)
	)charset=utf8;
    2、把文件拷贝到数据库的搜索路径中
      1、查看搜索路径
	show variables like 'secure_file_priv';	
      2、拷贝文件
        sudo cp scoreTable /var/lib/mysql-files/
    3、执行数据导入语句
      load data infile '/var/lib/mysql-files/scoreTable.csv'
      into table score
      fields terminated by ','
      lines terminated by '\n'
      ;

      第一组：所有者权限      tarena
      第二组：同组用户权限    tarena2
      第三组：其他用户权限    mysql
      修改文件权限
      r:4  读
      w:2  编辑
      x:1  执行
      chmod 777 文件名 rwxrwxrwx 
      chmod 644 文件名 rw-r--r--
6、导出数据
  1、
  2、语法
  3、示例
    1、把MOSHOU库下的sanguo表英雄的姓名、攻击值和国家导出到sanguo.csv
	select name,gongji,country from MOSHOU.sanguo
	into outfile '/var/lib/mysql-files/sanguo.csv'
	fields terminated by ','
	lines terminated by '\n'
	;
7、E-R模型
   一对一(1:1)：老公对老婆
   A中1个实体，在B中只能有1个与其关联
   B中1个实体，在A中只能有1个与其关联
   一对多(1:n):父亲对孩子
   多对多(m:n):兄弟姐妹对兄弟姐妹
   A中1个实体，B中多个与其关联

   3、ER图绘制
     1、矩形框代表实体，菱形框代表关系，椭圆形代表属性
     2、示例(老师与课题)
       老师：员工号、姓名、职称
       课题：课题号、课题名
       关系：m:n
8、MySQL用户管理
  1、开启远程连接
    1、sudo -i
    2、cd /etc/mysql/mysql.conf.d/
    3、subl mysqld.cnf
      #bind-address=127.0.0.1
      把前面 # 去掉,保存退出
     或者
      vi mysqld.cnf
      按a -> 改内容 -> 按ESC -> 按 shift + : -> wq
    4、/etc/init.d/mysql restart
  2、用root用户添加授权用户
    1、用root用户登录mysql
      mysql -uroot -p123456
    2、授权
      grant 权限列表 on 库.表 to '用户名"@"%'
      indentified by '密码'
      with grant option;

      权限列表：all privileges、select、drop
      库.表   ：库.*、*.*(所有库所有表)
    3、示例：
      1、添加授权用户 tiger，对db4库有所有权限，密码123
      grant all privileges on db4.* to 'tiger"@"%'
      indentified by '123'
      with grant option;

9、数据库三范式
  1、第一范式(1NF)：列不可拆分
  2、第二范式(2NF)：唯一标识
  3、第三范式(3NF)：引用主键
  说明：后一个范式，都是在前一个范式的基础上建立的

10、MySQL调优
  1、创建索引
    在select、where、order by常涉及到的字段建立索引
  2、选择合适存储引擎
    1、读操作多 ：MyISAM
    2、写操作多 ：InnoDB
  3、SQL语句优化(避免全表扫描)
    1、where子句尽量不使用 != ,否则放弃索引全表扫描
    2、尽量避免NULL判断,全表扫描
      优化前:
        select number from t1 where number is null;
      优化后:
        在number字段设置默认值0,确保number字段无NULL
        select number from t1 where number=0;
    3、尽量避免用or连接条件,否则全表扫描
      优化前：
        select id from t1 where id=10 or id=20;
      优化后：
        select id from t1 where id=10
        union all
	select id from t1 where id=20;
    4、模糊查询尽量避免使用前置 %,否则全表扫描
      select variable from t1 where name="secure%";
    5、尽量避免使用in和not in,否则全表扫描
      优化前 ：
        select id from t1 where id in(1,2,3,4);
      优化后 ：
        select id from t1 where id between 1 and 4;
    6、不能使用 select * ...
      用具体字段代替*,不要返回用不到的任何字段

作业：
1、把/etc/passwd 导入到数据表 userinfo
  tarena : x : 1000 : 1000 :tarena,,:/home/tarena : /bin/bash
  用户名  密码  uid    gid 用户描述  主目录        登录权限
create table userinfo(
name varchar(20),
pw varchar(20),
uid int,
gid int,
user_name varchar(30),
mulu varchar(50),
quanxian varchar(30)
);
sudo cp /etc/passwd /var/lib/mysql-files/
load data infile '/var/lib/mysql-files/passwd'
into table homework.userinfo
fields terminated by ':'
lines terminated by '\n'
;

2、在userinfo 表的第一列添加一个id 字段，主键，自增长，显示宽度为3.位数不够用0填充
    001 root x 0 0 root /root /bin/...

alter table userinfo add id smallint(3) zerofill primary key auto_increment not null first;







