进程间通信之共享内存
  通信原理：在内存空间开辟一个区域，对多个进程可见，进程可以写入内容或读取内容，
            但是每次写入的内容会覆盖之前内容

from multiprocessing import Value,Array
obj = Value(ctype,obj)
  功能：开辟共享内存空间
  参数：ctype 字符串，表示共享内存中要存储的数据类型
              常用类型： int-->i
  	             float-->f
  	       char(bytes)-->c
        obj   共享内存中放入的初始化数据
  obj.value 对该属性的修改和使用即对共享内存数据的修改和使用

obj = Array(ctype,obj)
  功能：创建共享内存
  参数：cytpe 要存储的数据类型
        obj   存入要结构化的数据(列表，bytes字符串)表示共享内存中的初始数据
              传入正整数，则表示在共享内存中开辟指定大小的数据空间
  返回值：共享内存对象
    *可以通过遍历获取每个值，支持索引操作
      e.g. obj[2] 表示获取共享内存中第三项，对其修改即对共享内存修改
    *如果存入的是字符串，可以通过obj.value直接打印整个字符串

信号量（信号灯）
  原理：给定一个数量，多个进程均可见，多个进程可以通过方法操作数量，达到协同工作的目的

from multiprocessing import Semaphore

sem = Semaphore(num)
  功能：创建信号量对象
  参数：信号量的初始值
  返回值：信号量对象
  sem.acquire() 将信号量减1 当信号量为0 时会阻塞
  sem.release() 将信号量加1
  sem.get_value() 获取信号量数量


多任务编程之 线程（Thread）
  什么是线程？
    1、线程也是多任务编程方法
    2、也可以使用计算机的多核资源
    3、线程被称为轻量级的进程
    4、线程是系统分配内核的最小工作单元
  线程的特征
    1、一个进程可以包含多个线程
    2、线程是一个运行的过程，消耗计算机资源
    3、多个线程的执行相互不影响不干扰
    4、线程的创建销毁，消耗的资源远远小于进程
    5、一个进程中的多个线程，共享这个进程的系统资源
    6、每个线程也有自己特有的特征，比如ID，指令集等

threading 模块创建线程
from threading import Thread

t = Thread()
  功能：创建线程对象
  参数：target 绑定线程函数
        args   元组 给线程函数键值传参
	kwargs 字典 给线程函数键值传参
	name   线程名称  默认Thread-1

  t.start() 启动线程 自动运行线程函数
  t.join([timeout])  回收线程

线程对象属性
  t.name  线程名称
  t.setName()  设置名称
  t.getName()  获取名称
  t.is_alive() 线程状态

  threading.currentThread() 在线程函数中获取当前线程对象
  t.daemon 默认为False此时主线程退出，分支线程会继续执行
           如果设置为True则主线程退出，分支线程有人随之退出
  t.setDaemon(True)  设置daemon属性
  t.isDaemon()       判断daemon值
    * 在start前设置，通常不和join同用

创建自己的线程类
  步骤：
    1、继承Thread
    2、添加自己属性写__init__,加载父类的init
    3、重写run方法
    4、使用自己的类生成线程对象，调用start启动线程，此时会自动执行run方法作为线程执行

线程间通信
  通信方法：使用进程空间中全局变量通信
  注意事项；共享资源的争夺，往往需要同步互斥机制协调
线程的同步互斥
  共享资源（临界资源）：多个线程都可以操作的资源称为共享资源
  临界区：指一段代码段，对临界资源操作的代码段为临界区
  同步：同步是一种合作关系，为完成任务，多进程或者线程之间形成一种协调，
        按照必要的步骤有序执行操作临界资源
  互斥：互斥是一种制约关系，当一个进程或者线程使用临界资源时，会进行加锁处理，此时另一个
        进程或者线程就无法操作临界资源，直到解锁后才能操作

线程的同步互斥方法
  线程 Event 
    from threading import Event

    e = Event() 创建线程Event对象
    
    e.wait([timeout])
      功能：阻塞函数，等待e被设置
      参数：超时时间
    e.set() 将e变为设置状态
    e.clear() 将e变回未设置状态
    e.is_set() 判断当前e的状态，被设置得到True否则False

  线程锁Lock
    from threading import Lock

    lock = Lock() 创建锁对象
    lock.acquire() 上锁 如果已经上锁调用此函数会阻塞
    lock.release() 解锁
    with 语句 开始自动上锁
         语句执行完自动解锁

python线程的GIL问题（全局解释器锁）
GIL：由于python解释器设计中加入了解释器锁，导致python解释器在同一时刻只能解释一个线程，
     所以大大降低了python的执行效率
后果：python线程一般会用在存在大量阻塞的IO程序或者高延迟的IO程序中（网络消息收发）
     因为python线程在遇到阻塞时会主动让出解释器
GIL建议解决：
  *尽量使用进程完成并发
  *不使用C作为解释器  java  C#
  *可以使用多种组合的并发方案

测试效率

作业：总结进程线程的区别和编程特点
      复习socket网络通信
      聊天室分析流程

1、进程和线程的区别和联系
  1.两者都是多任务编程方式，都能够使用计算机的多核
  2.进程的创建和删除消耗的计算机资源比线程要多
  3.进程空间独立，数据互不干扰，有专门的通信方法，而线程使用全局变量进行通信
  4.一个进程可创建多个线程分支，两者之间存在包含关系
  5.多个进程共用进程的资源，在共享资源操作时往往需要同步互斥操作
  6.进程线程都在系统中有自己的特有属性标志，如ID,代码段，命令集等
        
使用场景
*某个任务中并发比较多，此时多线程消耗资源比价少
*不同的独立的任务模块，用多进程相对空间比较好管理
*在通信上考虑可行性，如果数据逻辑复杂需要的用不互斥较多，这时使用线程用不互斥 可能会容易出错

要求：
  1.进程线程的区别
  2.进程间通信都知道哪些，有什么特点
  3.什么是同步互斥，你在什么情况下使用
  4.给一个情形，分析用线程还是进程，为什么
  5.问一些概念和处理方法，僵尸进程 进程状态 线程效率